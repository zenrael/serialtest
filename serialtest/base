import serial
import os
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from gi.repository import GLib

class Base(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Serial Connection Test")
        self.set_border_width(10)
        #self.set_default_size(300,45)

        grid = Gtk.Grid()
        grid.set_row_spacing(10)
        grid.set_column_spacing(10)
        self.add(grid)

        self.conbutton = Gtk.Button.new_with_label("Connect")
        self.conbutton.connect("clicked", self.connect_serial)
        grid.attach(self.conbutton, 0, 0, 1, 1)

        self.label = Gtk.Label()
        grid.attach(self.label, 1, 0, 1, 1)

        scrolledwindow = Gtk.ScrolledWindow()
        scrolledwindow.set_hexpand(True)
        scrolledwindow.set_vexpand(True)
        grid.attach(scrolledwindow, 0, 1, 3, 3)
        
        self.textview = Gtk.TextView()
        self.textbuffer = self.textview.get_buffer()
        self.textview.set_editable(False)
        self.textview.set_cursor_visible(False)
        scrolledwindow.add(self.textview)

        self.ser = serial.Serial()
        self.serialstatus = False
         
        GLib.timeout_add(1000, self.ttycheck)

    def ttycheck(self):
        if self.serialstatus:
            return True
        if(os.path.exists("/dev/ttyUSB0")):
            self.label.set_label("Nano Connected")
            self.conbutton.set_sensitive(True)
        else:
            self.label.set_label("Nano Disconnected")
            self.conbutton.set_sensitive(False)
            if(self.ser.isOpen):
                self.ser.close()          
        return True

    def connect_serial(self, button):
        self.ser.port = '/dev/ttyUSB0'
        self.ser.timeout = 1
        self.ser.baudrate = 9600
        if self.serialstatus:
            self.ser.close()
            self.serialstatus = False
            self.conbutton.set_label("Connect")
            return
        self.ser.open()
        self.serialstatus = True
        GLib.timeout_add(100, self.readline_serial)
        self.label.set_label("Serial Open")
        self.conbutton.set_label("Disconnect")
            
    def disconnect_serial(self):
        self.ser.close()

    def readline_serial(self):
        if not self.serialstatus:
            return False
        x = self.ser.read(20)
        end = self.textbuffer.get_end_iter()
        self.textbuffer.insert(end, str(x) + "\n")
        return True


win = Base()
win.connect("delete-event", Gtk.main_quit)
win.set_position(Gtk.WindowPosition.CENTER)
win.show_all()
Gtk.main()



